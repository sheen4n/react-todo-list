{"version":3,"sources":["Todo.js","NewTodoForm.js","ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","task","removeTodo","saveEdit","index","completed","toggleCompletion","useState","isEditing","setIsEditing","editValue","setEditValue","toggleForm","className","type","value","onChange","e","target","onClick","preventDefault","NewToDoForm","addTodo","newTodo","setNewTodo","onSubmit","htmlFor","placeholder","id","ToDoList","uuidv4","todos","setTodos","handleEditTodo","editedTodo","i","newTodos","map","key","filter","td","handleRemoveTodo","handleToggleCompleteTodo","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iUAsDeA,G,MAnDF,SAAC,GAOP,IANLC,EAMI,EANJA,KACAC,EAKI,EALJA,WACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,UACAC,EACI,EADJA,iBACI,EAC8BC,oBAAS,GADvC,mBACGC,EADH,KACcC,EADd,OAE8BF,mBAASN,GAFvC,mBAEGS,EAFH,KAEcC,EAFd,KAIEC,EAAa,kBAAMH,GAAcD,IAQvC,OAAIA,EAEA,yBAAKK,UAAU,QACb,0BAAMA,UAAU,kBACd,2BACEC,KAAK,OACLC,MAAOL,EACPM,SAAU,SAAAC,GAAC,OAAIN,EAAaM,EAAEC,OAAOH,UAEvC,4BAAQI,QAfK,SAAAF,GACnBA,EAAEG,iBACFjB,EAASO,EAAWN,GACpBQ,MAYM,UAMJ,yBAAKC,UAAWR,EAAY,iBAAmB,QAC7C,wBAAIQ,UAAU,YAAYM,QAAS,kBAAMb,MACtCL,GAEH,yBAAKY,UAAU,gBACb,4BAAQM,QAASP,GACf,uBAAGC,UAAU,gBAEf,4BAAQM,QAASjB,GACf,uBAAGW,UAAU,sB,QCnBVQ,G,MAxBK,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACLf,mBAAS,IADJ,mBAC5BgB,EAD4B,KACnBC,EADmB,KASnC,OACE,0BAAMC,SAPS,SAAAR,GACfA,EAAEG,iBACFE,EAAQC,GACRC,EAAW,KAIeX,UAAU,eAClC,2BAAOa,QAAQ,QAAf,YACA,2BACEZ,KAAK,OACLa,YAAY,WACZC,GAAG,OACHb,MAAOQ,EACPP,SAAU,SAAAC,GAAC,OAAIO,EAAWP,EAAEC,OAAOH,UAErC,+CCiCSc,G,MAjDE,WAAO,IAAD,EACKtB,mBAAS,CACjC,CAAEN,KAAM,mBAAoBI,WAAW,EAAOuB,GAAIE,eAClD,CAAE7B,KAAM,eAAgBI,WAAW,EAAOuB,GAAIE,iBAH3B,mBACdC,EADc,KACPC,EADO,KAcfC,EAAiB,SAACC,EAAYC,GAClC,IAAIC,EAAQ,YAAOL,GACnBK,EAASD,GAAGlC,KAAOiC,EACnBF,EAASI,IASX,OACE,yBAAKvB,UAAU,YACb,2CACc,+DAEd,4BACGkB,EAAMM,KAAI,WAA0BjC,GAA1B,IAAGH,EAAH,EAAGA,KAAMI,EAAT,EAASA,UAAWuB,EAApB,EAAoBA,GAApB,OACT,kBAAC,EAAD,CACE3B,KAAMA,EACNqC,IAAKV,EACL1B,WAAY,kBA1BG,SAAA0B,GACvBI,EAAS,YAAID,GAAOQ,QAAO,SAAAC,GAAE,OAAIA,EAAGZ,KAAOA,MAyBjBa,CAAiBb,IACnCzB,SAAU8B,EACV7B,MAAOA,EACPC,UAAWA,EACXC,iBAAkB,kBApBK,SAAA6B,GAC/B,IAAIC,EAAQ,YAAOL,GACnBK,EAASD,GAAG9B,WAAa+B,EAASD,GAAG9B,UACrC2B,EAASI,GAiBuBM,CAAyBtC,UAIvD,kBAAC,EAAD,CAAakB,QAtCK,SAAArB,GACpB+B,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAAE9B,OAAMI,WAAW,EAAOuB,GAAIE,wBCDvCa,MARf,WACE,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,QCKc+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dc706bdf.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Todo.css';\n\nconst Todo = ({\n  task,\n  removeTodo,\n  saveEdit,\n  index,\n  completed,\n  toggleCompletion\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editValue, setEditValue] = useState(task);\n\n  const toggleForm = () => setIsEditing(!isEditing);\n\n  const onEditSubmit = e => {\n    e.preventDefault();\n    saveEdit(editValue, index);\n    toggleForm();\n  };\n\n  if (isEditing) {\n    return (\n      <div className='Todo'>\n        <form className='Todo-edit-form'>\n          <input\n            type='text'\n            value={editValue}\n            onChange={e => setEditValue(e.target.value)}\n          />\n          <button onClick={onEditSubmit}>Save</button>\n        </form>\n      </div>\n    );\n  } else {\n    return (\n      <div className={completed ? 'Todo completed' : 'Todo'}>\n        <li className='Todo-task' onClick={() => toggleCompletion()}>\n          {task}\n        </li>\n        <div className='Todo-buttons'>\n          <button onClick={toggleForm}>\n            <i className='fas fa-pen' />\n          </button>\n          <button onClick={removeTodo}>\n            <i className='fas fa-trash' />\n          </button>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Todo;\n","import React, { useState } from 'react';\nimport './NewTodoForm.css';\n\nconst NewToDoForm = ({ addTodo }) => {\n  const [newTodo, setNewTodo] = useState('');\n\n  const onSubmit = e => {\n    e.preventDefault();\n    addTodo(newTodo);\n    setNewTodo('');\n  };\n\n  return (\n    <form onSubmit={onSubmit} className='NewTodoForm'>\n      <label htmlFor='task'>New Todo</label>\n      <input\n        type='text'\n        placeholder='New todo'\n        id='task'\n        value={newTodo}\n        onChange={e => setNewTodo(e.target.value)}\n      />\n      <button>Add Todo</button>\n    </form>\n  );\n};\n\nexport default NewToDoForm;\n","import React, { useState } from 'react';\nimport Todo from './Todo';\nimport { v4 as uuidv4 } from 'uuid';\nimport NewTodoForm from './NewTodoForm';\nimport './TodoList.css';\n\nconst ToDoList = () => {\n  const [todos, setTodos] = useState([\n    { task: 'Walk the Chicken', completed: false, id: uuidv4() },\n    { task: 'Swim the Pig', completed: false, id: uuidv4() }\n  ]);\n\n  const handleAddTodo = task => {\n    setTodos([...todos, { task, completed: false, id: uuidv4() }]);\n  };\n\n  const handleRemoveTodo = id => {\n    setTodos([...todos].filter(td => td.id !== id));\n  };\n\n  const handleEditTodo = (editedTodo, i) => {\n    let newTodos = [...todos];\n    newTodos[i].task = editedTodo;\n    setTodos(newTodos);\n  };\n\n  const handleToggleCompleteTodo = i => {\n    let newTodos = [...todos];\n    newTodos[i].completed = !newTodos[i].completed;\n    setTodos(newTodos);\n  };\n\n  return (\n    <div className='TodoList'>\n      <h1>\n        To do List! <span>A simple react todo list app</span>\n      </h1>\n      <ul>\n        {todos.map(({ task, completed, id }, index) => (\n          <Todo\n            task={task}\n            key={id}\n            removeTodo={() => handleRemoveTodo(id)}\n            saveEdit={handleEditTodo}\n            index={index}\n            completed={completed}\n            toggleCompletion={() => handleToggleCompleteTodo(index)}\n          />\n        ))}\n      </ul>\n      <NewTodoForm addTodo={handleAddTodo} />\n    </div>\n  );\n};\n\nexport default ToDoList;\n","import React from 'react';\nimport './App.css';\nimport ToDoList from './ToDoList';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}